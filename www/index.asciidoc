:source-highlighter: coderay

= http://sourceforge.net/projects/autoc/files[*AutoC*] - *C* source code generation in *Ruby*

== Introduction

*AutoC* is a collection of *Ruby* modules dedicated to the task of automatic generation of *C* source code.

Currently *AutoC* consists of two parts:

1) {AutoC::Code} - generic C multi-source module generator.
2) {AutoC::Collection} - strongly-typed data structure generators similar
to the C++ STL container classes.

=== Avaliable data container generators

* Vector
* List
* Queue
* HashSet
* HashMap

== Availability

*AutoC* is an open-source software.
The complete source code is available in the http://sourceforge.net/p/autoc/code/ci/default/tree[code repository].
Binary distributions can be downloaded from the *SourceForge* http://sourceforge.net/projects/autoc/files[download page].
The Ruby *GEM* can be obtained from the *RubyGems* http://rubygems.org/gems/autoc[download page] or fetched directly via

[source,bash]
$ gem install autoc

== Documentation

A complete documentation is available in HTML form. Refer to `doc/index.html`.

== Quick start

Here is a sample usage of *AutoC* to create a strongly-typed _list_ container for _int_ data type similar to the *C++*'s _std::forward_list<int>_ templated class.

* Create a *Ruby* script _`int_list.rb`_ containing the appropriate definitions.

[source,ruby]
require "autoc"
CodeBuilder::CModule.generate!(:Containers) do |m|
	m << DataStructBuilder::List.new(:IntList, :type=>"int")
end

* Call *Ruby* to generate the *C* source code.

[source,bash]
$ ruby int_list.rb

This will emit the module definition header file _`containers_auto.h`_ accompanied by the module implementation source file _`containers_auto.c`_.

* Create a *C* source code _`main.c`_ which uses the generated module.

[source,c]
#include <stdio.h>
#include "containers_auto.h"
int main(int argc, char** argv) {
	IntList list;
	IntListCtor(&list);
	IntListPush(&list, 1);
	IntListPush(&list, 2);
	IntListPush(&list, 3);
	printf("size=%d\n", IntListSize(&list));
	IntListDtor(&list);
	return 0;
}

The code above creates a list of integers data container on stack, puts three integer values into it, prints the container's size and finally destroys the container.

* Build the sample executable.

[source,bash]
$ cc -o runme main.c containers_auto.c

== The END

_Happy hacking and have fun!_

Oleg A. Khlybov <fougas@mail.ru>
